import encodings, unicode, strformat, streams, strutils

const supportedEncodings = [
  "850",
  "862",
  "866",
  "ANSI_X3.4-1968",
  "ANSI_X3.4-1986",
  "ARABIC",
  "ARMSCII-8",
  "ASCII",
  "ASMO-708",
  "BIG-5",
  "BIG-FIVE",
  "BIG5",
  "BIG5-HKSCS",
  "BIG5-HKSCS:1999",
  "BIG5-HKSCS:2001",
  "BIG5-HKSCS:2004",
  "BIG5-HKSCS:2008",
  "BIG5HKSCS",
  "BIGFIVE",
  "C99",
  "CHAR",
  "CHINESE",
  "CN",
  "CN-BIG5",
  "CN-GB",
  "CN-GB-ISOIR165",
  "CP154",
  "CP367",
  "CP819",
  "CP850",
  "CP862",
  "CP866",
  "CP874",
  "CP932",
  "CP936",
  "CP949",
  "CP950",
  "CP1131",
  "CP1133",
  "CP1250",
  "CP1251",
  "CP1252",
  "CP1253",
  "CP1254",
  "CP1255",
  "CP1256",
  "CP1257",
  "CP1258",
  "CP1361",
  "CP50221",
  "CSASCII",
  "CSBIG5",
  "CSEUCKR",
  "CSEUCPKDFMTJAPANESE",
  "CSEUCTW",
  "CSGB2312",
  "CSHALFWIDTHKATAKANA",
  "CSHPROMAN8",
  "CSIBM866",
  "CSISO14JISC6220RO",
  "CSISO57GB1988",
  "CSISO58GB231280",
  "CSISO87JISX0208",
  "CSISO159JISX02121990",
  "CSISO2022CN",
  "CSISO2022JP",
  "CSISO2022JP2",
  "CSISO2022KR",
  "CSISOLATIN1",
  "CSISOLATIN2",
  "CSISOLATIN3",
  "CSISOLATIN4",
  "CSISOLATIN5",
  "CSISOLATIN6",
  "CSISOLATINARABIC",
  "CSISOLATINCYRILLIC",
  "CSISOLATINGREEK",
  "CSISOLATINHEBREW",
  "CSKOI8R",
  "CSKSC56011987",
  "CSKZ1048",
  "CSMACINTOSH",
  "CSPC850MULTILINGUAL",
  "CSPC862LATINHEBREW",
  "CSPTCP154",
  "CSSHIFTJIS",
  "CSUCS4",
  "CSUNICODE",
  "CSUNICODE11",
  "CSUNICODE11UTF7",
  "CSVISCII",
  "CYRILLIC",
  "CYRILLIC-ASIAN",
  "ECMA-114",
  "ECMA-118",
  "ELOT_928",
  "EUC-CN",
  "EUC-JP",
  "EUC-KR",
  "EUC-TW",
  "EUCCN",
  "EUCJP",
  "EUCKR",
  "EUCTW",
  "EXTENDED_UNIX_CODE_PACKED_FORMAT_FOR_JAPANESE",
  "GB2312",
  "GB18030",
  "GBK",
  "GB_1988-80",
  "GB_2312-80",
  "GEORGIAN-ACADEMY",
  "GEORGIAN-PS",
  "GREEK",
  "GREEK8",
  "HEBREW",
  "HP-ROMAN8",
  "HZ",
  "HZ-GB-2312",
  "IBM-850",
  "IBM-921",
  "IBM-932",
  "IBM-1131",
  "IBM-1252",
  "IBM-CP1133",
  "IBM-EUCCN",
  "IBM-EUCJP",
  "IBM-EUCKR",
  "IBM-EUCTW",
  "IBM367",
  "IBM819",
  "IBM850",
  "IBM862",
  "IBM866",
  "ISO-2022-CN",
  "ISO-2022-CN-EXT",
  "ISO-2022-JP",
  "ISO-2022-JP-1",
  "ISO-2022-JP-2",
  "ISO-2022-JP-MS",
  "ISO-2022-KR",
  "ISO-8859-1",
  "ISO-8859-2",
  "ISO-8859-3",
  "ISO-8859-4",
  "ISO-8859-5",
  "ISO-8859-6",
  "ISO-8859-7",
  "ISO-8859-8",
  "ISO-8859-9",
  "ISO-8859-10",
  "ISO-8859-11",
  "ISO-8859-13",
  "ISO-8859-14",
  "ISO-8859-15",
  "ISO-8859-16",
  "ISO-10646-UCS-2",
  "ISO-10646-UCS-4",
  "ISO-CELTIC",
  "ISO-IR-6",
  "ISO-IR-14",
  "ISO-IR-57",
  "ISO-IR-58",
  "ISO-IR-87",
  "ISO-IR-100",
  "ISO-IR-101",
  "ISO-IR-109",
  "ISO-IR-110",
  "ISO-IR-126",
  "ISO-IR-127",
  "ISO-IR-138",
  "ISO-IR-144",
  "ISO-IR-148",
  "ISO-IR-149",
  "ISO-IR-157",
  "ISO-IR-159",
  "ISO-IR-165",
  "ISO-IR-166",
  "ISO-IR-179",
  "ISO-IR-199",
  "ISO-IR-203",
  "ISO-IR-226",
  "ISO646-CN",
  "ISO646-JP",
  "ISO646-US",
  "ISO8859-1",
  "ISO8859-2",
  "ISO8859-3",
  "ISO8859-4",
  "ISO8859-5",
  "ISO8859-6",
  "ISO8859-7",
  "ISO8859-8",
  "ISO8859-9",
  "ISO8859-10",
  "ISO8859-11",
  "ISO8859-13",
  "ISO8859-14",
  "ISO8859-15",
  "ISO8859-16",
  "ISO_646.IRV:1991",
  "ISO_8859-1",
  "ISO_8859-1:1987",
  "ISO_8859-2",
  "ISO_8859-2:1987",
  "ISO_8859-3",
  "ISO_8859-3:1988",
  "ISO_8859-4",
  "ISO_8859-4:1988",
  "ISO_8859-5",
  "ISO_8859-5:1988",
  "ISO_8859-6",
  "ISO_8859-6:1987",
  "ISO_8859-7",
  "ISO_8859-7:1987",
  "ISO_8859-7:2003",
  "ISO_8859-8",
  "ISO_8859-8:1988",
  "ISO_8859-9",
  "ISO_8859-9:1989",
  "ISO_8859-10",
  "ISO_8859-10:1992",
  "ISO_8859-11",
  "ISO_8859-13",
  "ISO_8859-14",
  "ISO_8859-14:1998",
  "ISO_8859-15",
  "ISO_8859-15:1998",
  "ISO_8859-16",
  "ISO_8859-16:2001",
  "JAVA",
  "JIS0208",
  "JISX0201-1976",
  "JIS_C6220-1969-RO",
  "JIS_C6226-1983",
  "JIS_X0201",
  "JIS_X0208",
  "JIS_X0208-1983",
  "JIS_X0208-1990",
  "JIS_X0212",
  "JIS_X0212-1990",
  "JIS_X0212.1990-0",
  "JOHAB",
  "JP",
  "KOI8-R",
  "KOI8-RU",
  "KOI8-T",
  "KOI8-U",
  "KOREAN",
  "KSC_5601",
  "KS_C_5601-1987",
  "KS_C_5601-1989",
  "KZ-1048",
  "L1",
  "L2",
  "L3",
  "L4",
  "L5",
  "L6",
  "L7",
  "L8",
  "L10",
  "LATIN-9",
  "LATIN1",
  "LATIN2",
  "LATIN3",
  "LATIN4",
  "LATIN5",
  "LATIN6",
  "LATIN7",
  "LATIN8",
  "LATIN10",
  "MAC",
  "MACARABIC",
  "MACCENTRALEUROPE",
  "MACCROATIAN",
  "MACCYRILLIC",
  "MACGREEK",
  "MACHEBREW",
  "MACICELAND",
  "MACINTOSH",
  "MACROMAN",
  "MACROMANIA",
  "MACTHAI",
  "MACTURKISH",
  "MACUKRAINE",
  "MS-ANSI",
  "MS-ARAB",
  "MS-CYRL",
  "MS-EE",
  "MS-GREEK",
  "MS-HEBR",
  "MS-TURK",
  "MS936",
  "MS_KANJI",
  "MULELAO-1",
  "NEXTSTEP",
  "PT154",
  "PTCP154",
  "R8",
  "RK1048",
  "ROMAN8",
  "SHIFT-JIS",
  "SHIFT_JIS",
  "SJIS",
  "STRK1048-2002",
  "TCVN",
  "TCVN-5712",
  "TCVN5712-1",
  "TCVN5712-1:1993",
  "TIS-620",
  "TIS620",
  "TIS620-0",
  "TIS620.2529-1",
  "TIS620.2533-0",
  "TIS620.2533-1",
  "UCS-2",
  "UCS-2-INTERNAL",
  "UCS-2-SWAPPED",
  "UCS-2BE",
  "UCS-2LE",
  "UCS-4",
  "UCS-4-INTERNAL",
  "UCS-4-SWAPPED",
  "UCS-4BE",
  "UCS-4LE",
  "UHC",
  "UNICODE-1-1",
  "UNICODE-1-1-UTF-7",
  "UNICODEBIG",
  "UNICODELITTLE",
  "US",
  "US-ASCII",
  "UTF-7",
  "UTF-8",
  "UTF-16",
  "UTF-16BE",
  "UTF-16LE",
  "UTF-32",
  "UTF-32BE",
  "UTF-32LE",
  "VISCII",
  "VISCII1.1-1",
  "WCHAR_T",
  "WINBALTRIM",
  "WINDOWS-874",
  "WINDOWS-936",
  "WINDOWS-1250",
  "WINDOWS-1251",
  "WINDOWS-1252",
  "WINDOWS-1253",
  "WINDOWS-1254",
  "WINDOWS-1255",
  "WINDOWS-1256",
  "WINDOWS-1257",
  "WINDOWS-1258",
  "X0201",
  "X0208",
  "X0212",
]


proc addUInt32(s: var string, v: uint32) =
  s.add ((v and 0x000000FF) shr 0).char
  s.add ((v and 0x0000FF00) shr 8).char
  s.add ((v and 0x00FF0000) shr 16).char
  s.add ((v and 0xFF000000.uint32) shr 24).char

var f = newFileStream("runetables.nim", fmWrite)

for destEncoding in [
  "WINDOWS-874",
  "WINDOWS-936",
  "WINDOWS-1250",
  "WINDOWS-1251",
  "WINDOWS-1252",
  "WINDOWS-1253",
  "WINDOWS-1254",
  "WINDOWS-1255",
  "WINDOWS-1256",
  "WINDOWS-1257",
  "WINDOWS-1258"]:

  var procName = destEncoding.replace("-", "_")
  #echo &"proc {procName}(utf8: string) ="
  f.writeLine &"proc to{procName}(s: string) ="
  f.writeLine "  for r in s.runes():"
  f.writeLine &"    case r.uint32"
  var
    fromStart = -1
    fromEnd = -1
    toStart = -1
    toEnd = -1
  proc dumpOf() =
    if toStart != -1:
      if fromStart == fromEnd:
        f.writeLine &"    of {fromStart}: s.add1({toStart})"
      else:
        f.writeLine &"    of {{{fromStart}..{fromEnd}}}: s.add1(i + {toStart})"
      fromStart = -1
      fromEnd = -1
      toStart = -1
      toEnd = -1
  for i in 0 ..< 0x110000:
    var s = ""
    s.addUInt32(i.uint32)
    if fromStart == -1:
      fromStart = i
      fromEnd = fromStart
    try:
      let u = convert(s, destEncoding, srcEncoding = "UTF-32")
      if u.len == 4:
        dumpOf()
        #f.writeLine $cast[seq[uint8]](s) , "->", "error"
      else:
        if u.len == 1:
          #f.writeLine $cast[seq[uint8]](s) , "->", $cast[seq[uint8]](u)
          if toStart == -1:
            toStart = u[0].int
            toEnd = toStart
          else:
            if toEnd + 1 == u[0].int:
              inc fromEnd
              inc toEnd
            else:
              dumpOf()
        # else:
        #   f.writeLine "# multi byte"
      #f.writeLine fromStart, ":", fromEnd, "  ->  ", toStart, ":", toEnd
    except:
      continue
  f.writeLine "    else: raise newException(ValueError, \"Can't encode\")"
  f.writeLine ""

f.close()